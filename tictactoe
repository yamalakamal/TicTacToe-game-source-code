package pk2;


import java.util.Scanner;  // Importing Scanner class
import java.util.Random;   // Importing Random class for AI moves

public class TicTacToe
{
    char[][] board;
    Scanner sc;

    public TicTacToe() 
    {
        board = new char[3][3];  // Initializes the 3x3 board array
        intboard();  // Calls the method to initialize the board
        sc = new Scanner(System.in); // Create the Scanner once
    }

    // This method initializes the board by filling it with empty spaces (' ')
    void intboard() 
    {
        for (int i = 0; i < board.length; i++) 
        {
            for (int j = 0; j < board[i].length; j++) 
            {
                board[i][j] = ' ';  // Fills each cell with a space
            }
        }
    }

    // This method displays the Tic-Tac-Toe board
    void dispBoard() 
    {
        System.out.println("----------------");
        for (int i = 0; i < board.length; i++) 
        {
            System.out.print("|  ");
            for (int j = 0; j < board[i].length; j++) 
            {
                System.out.print(board[i][j] + " |  ");
            }
            System.out.println();
            System.out.println("----------------");
        }
    }

    // Place a mark on the board
    void placemark(int row, int col, char mark)
    {
        if (row >= 0 && row <= 2 && col >= 0 && col <= 2 && board[row][col] == ' ') 
        {
            board[row][col] = mark;
        } else
        {
            System.out.println("Invalid inputs or position already taken");
        }
    }

    // Abstract player class
    abstract class Player
    {
        String name;
        char mark;

        boolean isvalidmove(int row, int col) 
        {
            return (row >= 0 && row <= 2 && col >= 0 && col <= 2 && board[row][col] == ' ');
        }

        abstract void makeMove();
    }

    // Human player class
    class HumanPlayer extends Player
    {
        HumanPlayer(String name, char mark)
        {
            this.name = name;
            this.mark = mark;
        }

        @Override
        void makeMove() 
        {
            int row, col;
            do 
            {
                System.out.println(name + ", enter row and col (0, 1, or 2):");
                row = sc.nextInt();
                col = sc.nextInt();
            }
            while (!isvalidmove(row, col));
            placemark(row, col, mark);
        }
    }

    // AI player class
    class AIPlayer extends Player
    {
        AIPlayer(String name, char mark)
        {
            this.name = name;
            this.mark = mark;
        }

        @Override
        void makeMove()
        {
            Random rand = new Random();
            int row, col;
            do 
            {
                row = rand.nextInt(3);  // Random row between 0-2
                col = rand.nextInt(3);  // Random col between 0-2
            }
            while (!isvalidmove(row, col));
            System.out.println(name + " placed at row " + row + ", col " + col);
            placemark(row, col, mark);
        }
    }

    // Check for a draw
    static boolean checkDraw(char[][] board)
    {
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++) 
            {
                if (board[i][j] == ' ') 
                {
                    return false;
                }
            }
        }
        return true;
    }

    // Check for column win
    static boolean checkColWin(char[][] board) 
    {
        for (int j = 0; j < 3; j++)
        {
            if (board[0][j] != ' ' && board[0][j] == board[1][j] && board[1][j] == board[2][j]) 
            {
                return true;
            }
        }
        return false;
    }

    // Check for row win
    static boolean checkRowWin(char[][] board)
    {
        for (int i = 0; i < 3; i++) 
        {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2])
            {
                return true;
            }
        }
        return false;
    }

    // Check for diagonal win
    static boolean checkDiagWin(char[][] board)
    {
        return (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2])
            || (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]);
    }

    public static void main(String[] args) 
    {
        TicTacToe game = new TicTacToe();

        HumanPlayer p1 = game.new HumanPlayer("Bob", 'X');
        AIPlayer p2 = game.new AIPlayer("AI", 'O');

        Player currentPlayer = p1;

        while (true)
        {
            game.dispBoard();
            currentPlayer.makeMove();

            if (checkRowWin(game.board) || checkColWin(game.board) || checkDiagWin(game.board)) {
                game.dispBoard();
                System.out.println(currentPlayer.name + " has won!");
                break;
            }
            else if (checkDraw(game.board))
            {
                game.dispBoard();
                System.out.println("It's a draw!");
                break;
            }

            // Switch players
            currentPlayer = (currentPlayer == p1) ? p2 : p1;
        }

        game.sc.close();  // Close Scanner when done
    }
}
